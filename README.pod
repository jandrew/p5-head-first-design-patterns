my $VERSION = 0.003;
=pod

=encoding utf-8

=head1 NAME

p5-head-first-design-patterns - perl (Moose) equivalent to the Java excercises

=begin html

<a href="https://www.perl.org">
	<img src="https://img.shields.io/badge/perl-5.10+-brightgreen.svg" alt="perl version">
</a>

<a href="https://travis-ci.org/jandrew/p5-head-first-design-patterns">
	<img alt="Build Status" src="https://travis-ci.org/jandrew/p5-head-first-design-patterns.png?branch=master" alt='Travis Build'/>
</a>

<a>
	<img src="https://img.shields.io/badge/this version-0.003-brightgreen.svg" alt="this version">
</a>

=end html
    
=head1 DESCRIPTION

OReilly's L<Head First Design Patterns|http://www.headfirstlabs.com/books/hfdp/> book is 
written for java programmers.  But I write perl and I don't write java. I<Maybe someday 
but not yet.>  So I thought I would do the exercises in Moose.  Here is the result.  I'm 
not trying to teach a class here just share my homework.  In order to follow what I have 
done you must already have some perl, perl testing, and OOP skills.  Additionally since I 
use Moose, I have made some adjustements that I hope still follow the pattern but leverage 
Moose a little.  For example in Chapter 1 I use the 'HasMethods[]' type from L<Type::Tiny> 
in the Duck class rather than creating a whole module just to force the same thing.  I also 
generally write roles instead of interfaces for the moose equivalent of the Java pattern.  
I<There is a L<MooseX equivalent for Interfaces|https://metacpan.org/pod/MooseX::Interface> 
but based on the chapter 1 explanation for the purpose of interfaces HasMethods[], or for 
more complicated implementations, roles seemed to fit the pattern sufficiently that using 
the MooseX::Interface module wasn't compelling enough for me.>  I should point out that I 
didn't stray as far from the book as I could have so maybe you are seeing the worst of both 
worlds as is common for compromises.  I'm happy to received reasonably worded explanations 
arguing for a closer Java syntax approximation or even better, alternate implementations of 
this homework to be included in this repo.

If you are looking for some rubric or pass fail cirteria over and above the test suit and 
the guidance provided in the book then allow me to offer the following; if your code feels 
like it has gotten too complicated in order to pass the tests then you're doing it wrong.  
If you can't mentally map the content of the book to your code you might also be doing it 
wrong, otherwise good luck!  TIMTOWTDI lives!  Note: the tests do not require Moose at any 
point so your perl object system of choice should work as you write what you want as long 
as it is valid perl syntax.  To point individual tests at your code just change the following 
line at the top to your library;

	my $sub_lib = 'jandrew_lib/Chapter01';# s/jandrew_lib/${you}_lib/

=head1 Repo Organization

Like a perl package this repo has a I<jandrew_>lib folder where the objects go and a t folder 
where the tests go.  In Java everything is an object.  In perl, scripts are used to run 
objects unless you are using the L<modulino
|http://perltricks.com/article/107/2014/8/7/Rescue-legacy-code-with-modulinos> concept.  I 
don't go that far although I would be willing to add modulino examples provided by others.  
Therefore all of my pattern implementations will be built as objects and stored in the 
'jandrew_lib' folder under the chapter from the book.  The tests to run those patterns will 
be stored in the t folder under the chapter for the book as well.  Most of the actual tests 
will be stored as .t files but the GUI tests will be stored as .pl files since I didn't feel 
energetic enough to write cross platform GUI tests.  If you want to run all the tests (except 
the GUI ones) at once run the file 03-tap_harness_tests.t.  If you fork the repo and delete/
rename the lib folder I provided then this approach should be sufficient to run your own 
learning cycle.  The goal is to treat your learning like Test Driven Development without 
having to write the tests.  (How great is that!)  If you want to test on the fly mid chapter 
you may need to comment out the reqire statements in each sub test for objects that you have not 
built yet.

=head1 How to participate

I will work to curate pull requests, additions to the wiki, and resolve opened issues in the 
most inclusive and responsive way I can and to the best of my knowledge.

If you wish to submit alternate solutions to the chapters in a pull request please add an 
additional lib folder in the format 'author_lib'  Then in the master test harness add a call 
to the appropriate test file with a new test name and point to your lib for the solution.  
(You can still use the current test if you want.)  If you have a github user name it would 
probably be best to use that as your author string.  Example from the master test harness;

	
	my	$args ={
			test_args =>{
				Ducks_test		=>[ $up . 'jandrew_lib/Chapter01/' ],# Original line
				Weather_test	=>[ $up . 'jandrew_lib/Chapter02/weather' ],# Original line
				Weather_alt_solution_test	=>[ $up . 'githubauth_lib/Chapter02/weather' ],# Added line
			},
			formatter => $formatter,
		};
	my	@tests =(
			[ $dir . 'Chapter01/MiniDuckSimulator.t', 'Ducks_test' ],# Original line
			[ $dir . 'Chapter02/WeatherStation.t', 'Weather_test' ],# Original line
			[ $dir . 'Chapter02/WeatherStation.t', 'Weather_alt_solution_test' ],# Added line to run new code with the existing test
		);
		
The variable $up is needed in the lib call so it will run as a file in the folder or at the 
top level with prove.  If you want to write your own test that's fine but the package should 
pass 'prove' at the top level folder and also 'make test'.   If you do this I should get an 
automated report from Travis-CI that will check the work before I complete the pull request.  
I am far less likely to accept pull requests for code that is untested or fails to pass the 
books fairly minimal test suite. 

For now this readme is the kickoff place and I plan on putting all answers and general spewing 
of conciousness on the L<wiki|https://github.com/jandrew/p5-head-first-design-patterns/wiki>.  
Additionally I have no plan to provide complete pod for each class and role written.

If you wish to submit an issue in github as opposed to alternate solutions, I would request 
that the issues be focused on failures in the code for untested platforms or code issues 
with untested functionality.  If you have a question about design choices or Moose vs. Java 
I will try my best to answer but you may just get "It seemed right at the time!".  Please 
provide any concerns about the book content to the authors on L<their website
|http://forums.oreilly.com/forum/48-head-first-design-patterns/>.

=head1 TODO

=over

B<1.> Make a presentation to go with this?

=back

=head1 AUTHOR

=over

Jed Lund

jandrew@cpan.org

=back

=cut
